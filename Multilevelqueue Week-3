#include<stdio.h>
#define MAX 10
typedef struct{
int pid,arrival,burst;
}process;

void sort_by_arrival(process queue[],int n){
  for(int i=0;i<n-1;i++){
      for(int j=0;j<n-i-1;j++){
          if(queue[j].arrival>queue[j+1].arrival){
             process temp=queue[j];
             queue[j]=queue[j+1];
             queue[j+1]=temp;
          }
       }
   }
}
void fcfs(process queue[],int n){
  int time=0;
  printf("PID\tARRIVAL\tBurst\tCompletion\tTurnaround\tWaiting\n");
  for (int i=0;i<n;i++){
    if(time<queue[i].arrival)
      time=queue[i].arrival;
      int completion=time+queue[i].burst;
      int turnaround=completion-queue[i].arrival;
      int Waiting=turnaround-queue[i].burst;
      printf("%d\t%d\t%d\t%d\t%d\t%d\n",queue[i].pid,queue[i].arrival,queue[i].burst,completion,turnaround,Waiting);
      time=completion;
  }
}
int main(){
    int n,sys_count=0,user_count=0;
    process sys_queue[MAX],user_queue[MAX];
    printf("Enter no of processes:");
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        process p;
        int type;
        printf("Enter PID,Arrival time,Burst time,type(0=System,1=user):");
        scanf("%d %d%d%d",&p.pid,&p.arrival,&p.burst,& type);
        if(type==0)
            sys_queue[sys_count++]=p;
        else
            user_queue[user_count++]=p;
    }
    sort_by_arrival(sys_queue,sys_count);
    sort_by_arrival(user_queue,user_count);
    printf("\n System process(Higher priority)\n");
    fcfs(sys_queue,sys_count);
    printf("\n user process(lower priority)\n");
    fcfs(user_queue,user_count);
    return 0;
}
